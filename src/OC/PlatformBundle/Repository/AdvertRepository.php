<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
// N'oubliez pas ce use
use Doctrine\ORM\QueryBuilder;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository {//extends \Doctrine\ORM\EntityRepository

    public function myFindAll() {

        // Méthode 1 : en passant par l'EntityManager

        $queryBuilder = $this->_em->createQueryBuilder()
                ->select('a')
                ->from($this->_entityName, 'a');

        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc OC\PlatformBundle\Entity\Advert
        // Méthode 2 : en passant par le raccourci (je recommande)

        $queryBuilder = $this->createQueryBuilder('a');


        // On n'ajoute pas de critère ou tri particulier, la construction
        // de notre requête est finie
        // On récupère la Query à partir du QueryBuilder

        $query = $queryBuilder->getQuery();


        // On récupère les résultats à partir de la Query

        $results = $query->getResult();


        // On retourne ces résultats

        return $results;
    }

    public function whereCurrentYear(QueryBuilder $qb) {

        $qb
                ->andWhere('a.date BETWEEN :start AND :end')
                ->setParameter('start', new \Datetime(date('Y') . '-01-01'))  // Date entre le 1er janvier de cette année
                ->setParameter('end', new \Datetime(date('Y') . '-12-31'))  // Et le 31 décembre de cette année

        ;
    }

    // Depuis un repository
    public function myFind() {

        $qb = $this->createQueryBuilder('a');


        // On peut ajouter ce qu'on veut avant

        $qb
                ->where('a.author = :author')
                ->setParameter('author', 'Marine')

        ;


        // On applique notre condition sur le QueryBuilder

        $this->whereCurrentYear($qb);


        // On peut ajouter ce qu'on veut après

        $qb->orderBy('a.date', 'DESC');


        return $qb
                        ->getQuery()
                        ->getResult();
    }

    // Depuis le repository d'Advert
    public function getAdvertWithApplications() {

        $qb = $this
                ->createQueryBuilder('a')
                ->leftJoin('a.applications', 'app')
                ->addSelect('app');


        return $qb->getQuery()->getResult();
    }

    /** TODO exo1 */
    public function getAdvertWithCategories(array $categoryNames) {
//          $em = $this->getDoctrine()->getManager();
//    $adverts = $em->getRepository('OCPlatformBundle:Advert')->findAll();
//   
        // $query = $this->_em->createQuery('SELECT a FROM  OCPlatformBundle:Advert a WHERE count(a.categories intersect  :categoryNamess) = count(:categoryNamess)');
        //https://dev.mysql.com/doc/refman/5.5/en/exists-and-not-exists-subqueries.html
        //$query = $this->_em->createQuery('SELECT a FROM  OCPlatformBundle:Advert a1 WHERE exists(select * from OCPlatformBundle:Advert a2 where a2.)');
        //  $query->setParameter('categoryNamess', $categoryNames);
//        $query = $this->_em->createQuery('SELECT a FROM  OCPlatformBundle:Advert a');
//        return $query->getResult();
// $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a order by a.date desc')->setFirstResult(0)->setMaxResults(3);
        echo 'lbl578 ';
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a '); //http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/pagination.html
        echo 'lbl579 ';
        $results = $query->getResult();
        echo 'lbl580 ';
        $selectedAdvert = new ArrayCollection();
        echo 'lbl581 ';
        foreach ($results as $annonce) {
            echo '<BR><BR>lbl582 ANNONCE title=' . $annonce->getTitle() . ' number of cat=' . strval(count($annonce->getCategories()));
            $foundAllConstraints = true; /*             * pr que les and fonctionnentRESPECTER LE SENS DES VARIABLES()= devrait commencer à false */
            foreach ($categoryNames as $categorieConstraint) {
                echo '<BR>lbl583 NEW CAT CONSTRAINT=' . $categorieConstraint;
                $foundCorrespondance = false;
                foreach ($annonce->getCategories() as $categAdvertEmbed) {
                    //                      $categorieConstraint ===
//                    $categorieAdvertEmbedded ? $selectedAdvert->add($annonce):;
                    echo '<BR>lbl587 $categorieConstraint=' . $categorieConstraint . ' NEW CATEGORIEANNONCE : $categAdvertEmbedNAME=' . $categAdvertEmbed->getName();
                    if ($categorieConstraint ==
                            $categAdvertEmbed->getName()) {
                        $foundCorrespondance = true;
                        echo 'lbl271';
                        echo ' test=ok';
                    } else {
                        echo 'lbl270';
                        /* $foundCorrespondance = false OR $foundCorrespondance */;
                        echo ' test=ko';
                    }
                }



                if ($foundAllConstraints) {
                    //$selectedAdvert->add($annonce);
                    // $results1 = $selectedAdvert;
                    echo ' <BR>lbl0098401';
                } else {
                    echo ' <BR>lbl0098400';
                }
                if ($foundCorrespondance) {
                    echo '  lbl7991';
                } else {
                    echo '  lbl7990';
                }
                // $foundAllConstraints = $foundAllConstraints and $foundCorrespondance;//c est bizarre ca ne fait pas d erreur de syntaxe
                $foundAllConstraints = $foundAllConstraints && $foundCorrespondance;
                echo 'AP ';
                if ($foundAllConstraints) {
                    //$selectedAdvert->add($annonce);
                    //$results1 = $selectedAdvert;
                    echo ' lbl0098421';
                } else {
                    echo ' lbl0098420';
                }
                if ($foundCorrespondance) {
                    echo ' lbl89991';
                } else {
                    echo '  lbl89990';
                }
            }

            if ($foundAllConstraints) {
                $selectedAdvert->add($annonce);
                $results1 = $selectedAdvert;
                echo '<BR>lbl98451';
            } else {
                echo '<BR>lbl98450';
                $results1 = array();
            }
        }


        //2eme facon par var arrray comme table  
//        $query2 = $this->_em->createQuery('SELECT q2 FROM  :categoryNames q2');
//        $query2->setParameter('categoryNames', $categoryNames);
//        $results2 = $query2->getResult();// Unknown Entity namespace alias ''.
//500 Internal Server Error - ORMException 
        //3eme facon, par bidirectionnel
        /*         * filtre sur le retour esclave -> proprio */

        return $results1;
    }

   

}
